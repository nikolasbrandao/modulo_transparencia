/**
 * wire.css
 * @version    1.2.5
 * @homepage   http://wirecss.com
 * @author     Pedro Garcia <pedro@pedrogarcia.me> (http://pedrogarcia.me)
 * @license    Licensed under MIT
 */
// ----------------------
//
// IMPORTS
//
// ----------------------
// Variables
// ----------------------
//
// SETTINGS
//
// ----------------------
// ----------------------
// Namespace
//
// To avoid conflicts, Wire used custom namespace,
// Set 'wire-' to avoid conflicts with others frameworks. '' by default.
// ----------------------
$wire-namespace: '' !default;

// ----------------------
// Markup Mode
//
// Compile Wire.css with markup, if you only need extend
// the styles in Sass, set this in 'false'.
// Set 'true' or 'false'. True by default.
// ----------------------
$wire-markup: true !default;

// ----------------------
// Debug Mode
//
// Highlight markup errors.
// Set 'true' or 'false'. False by default.
// ----------------------
$wire-debug: false !default;



// ----------------------
//
// VARIABLES
//
// ----------------------
// ----------------------
// Defaults Sizes (Base 10 to simplify)
// ----------------------
$wire-font-size-base: 16 !default;
$wire-line-height-base: 1.45 !default;
$wire-border-radius: 3px !default;

// ----------------------
// Colors
// ----------------------
// ----------------------
// Brand Colors
// ----------------------
$wire-color-primary: #48a8ce !default;
$wire-color-secundary: #7c7c7c !default;
$wire-color-alt: #e0e0e0 !default;
$wire-link-color: $wire-color-primary !default;
$wire-link-color-hover: darken($wire-color-primary, 30%) !default;
$wire-button-bg: $wire-color-primary !default;
$wire-button-color: #ffffff !default;
$wire-button-alt-bg: $wire-color-alt !default;
$wire-button-alt-color: $wire-color-secundary !default;
$wire-form-input-border: #e0e0e0 !default;
$wire-form-input-bg: #ffffff !default;
$wire-table-tr-even-bg: #e5e5e5 !default;
$wire-table-border-color: #d2d2d2 !default;

// ----------------------
// Grid
// ----------------------
$wire-max-columns: 12 !default;
$wire-base-gutter: 2% !default;

// ----------------------
// Breakpoints
// ----------------------
$wire-breakpoints: (
  "small": "screen and (max-width: 719px)",
  "retina": "(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dppx)",
  "medium": "screen and (min-width: 720px) and (max-width: 1023px)",
  "large": "screen and (min-width: 1024px)",
  "huge": "screen and (min-width: 1200px)"
) !default;


// Reset (Normalize)
/* ----------------------
//
// RESET (Normalize)
//
// ----------------------

/*! normalize.css v4.0.0 | MIT License | github.com/necolas/normalize.css */

/**
 * 1. Change the default font family in all browsers (opinionated).
 * 2. Prevent adjustments of font size after orientation changes in IE and iOS.
 */

html {
	font-family: sans-serif; /* 1 */

	-webkit-text-size-adjust: 100%; /* 2 */
	-ms-text-size-adjust: 100%; /* 2 */
}

/**
 * Remove the margin in all browsers (opinionated).
 */

body {
	margin: 0;
}

/* HTML5 display definitions
   ========================================================================== */

/**
 * Add the correct display in IE 9-.
 * 1. Add the correct display in Edge, IE, and Firefox.
 * 2. Add the correct display in IE.
 */

article,
aside,
details,
/* 1 */
figcaption,
figure,
footer,
header,
main,
/* 2 */
menu,
nav,
section,
summary {
	/* 1 */
	display: block;
}

/**
 * Add the correct display in IE 9-.
 */

audio,
canvas,
progress,
video {
	display: inline-block;
}

/**
 * Add the correct display in iOS 4-7.
 */

audio:not([controls]) {
	display: none;
	height: 0;
}

/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */

progress {
	vertical-align: baseline;
}

/**
 * Add the correct display in IE 10-.
 * 1. Add the correct display in IE.
 */

template,
/* 1 */
[hidden] {
	display: none;
}

/* Links
   ========================================================================== */

/**
 * Remove the gray background on active links in IE 10.
 */

a {
	background-color: transparent;
}

/**
 * Remove the outline on focused links when they are also active or hovered
 * in all browsers (opinionated).
 */

a:active,
a:hover {
	outline-width: 0;
}

/* Text-level semantics
   ========================================================================== */

/**
 * 1. Remove the bottom border in Firefox 39-.
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */

abbr[title] {
	border-bottom: none; /* 1 */
	text-decoration: underline; /* 2 */
	text-decoration: underline dotted; /* 2 */
}

/**
 * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
 */

b,
strong {
	font-weight: inherit;
}

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */

b,
strong {
	font-weight: bolder;
}

/**
 * Add the correct font style in Android 4.3-.
 */

dfn {
	font-style: italic;
}

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */

h1 {
	font-size: 2em;
	margin: .67em 0;
}

/**
 * Add the correct background and color in IE 9-.
 */

mark {
	background-color: #ffff00;
	color: #000000;
}

/**
 * Add the correct font size in all browsers.
 */

small {
	font-size: 80%;
}

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */

sub,
sup {
	font-size: 75%;
	line-height: 0;
	position: relative;
	vertical-align: baseline;
}

sub {
	bottom: -.25em;
}

sup {
	top: -.5em;
}

/* Embedded content
   ========================================================================== */

/**
 * Remove the border on images inside links in IE 10-.
 */

img {
	border-style: none;
}

/**
 * Hide the overflow in IE.
 */

svg:not(:root) {
	overflow: hidden;
}

/* Grouping content
   ========================================================================== */

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */

code,
kbd,
pre,
samp {
	font-family: monospace, monospace; /* 1 */
	font-size: 1em; /* 2 */
}

/**
 * Add the correct margin in IE 8.
 */

figure {
	margin: 1em 40px;
}

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */

hr {
	box-sizing: content-box; /* 1 */
	height: 0; /* 1 */
	overflow: visible; /* 2 */
}

/* Forms
   ========================================================================== */

/**
 * Change font properties to `inherit` in all browsers (opinionated).
 */

button,
input,
select,
textarea {
	font: inherit;
}

/**
 * Restore the font weight unset by the previous rule.
 */

optgroup {
	font-weight: bold;
}

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 * 2. Show the overflow in Edge, Firefox, and IE.
 */

button,
input,
/* 1 */
select {
	/* 2 */
	overflow: visible;
}

/**
 * Remove the margin in Safari.
 * 1. Remove the margin in Firefox and Safari.
 */

button,
input,
select,
textarea {
	/* 1 */
	margin: 0;
}

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */

button,
select {
	/* 1 */
	text-transform: none;
}

/**
 * Change the cursor in all browsers (opinionated).
 */

button,
[type="button"],
[type="reset"],
[type="submit"] {
	cursor: pointer;
}

/**
 * Restore the default cursor to disabled elements unset by the previous rule.
 */

[disabled] {
	cursor: default;
}

/**
 * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
 *    controls in Android 4.
 * 2. Correct the inability to style clickable types in iOS.
 */

button,
html [type="button"],
/* 1 */
[type="reset"],
[type="submit"] {
	-webkit-appearance: button; /* 2 */
}

/**
 * Remove the inner border and padding in Firefox.
 */

button::-moz-focus-inner,
input::-moz-focus-inner {
	border: 0;
	padding: 0;
}

/**
 * Restore the focus styles unset by the previous rule.
 */

button:-moz-focusring,
input:-moz-focusring {
	outline: 1px dotted ButtonText;
}

/**
 * Change the border, margin, and padding in all browsers (opinionated).
 */

fieldset {
	border: 1px solid #c0c0c0;
	margin: 0 2px;
	padding: .35em .625em .75em;
}

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */

legend {
	box-sizing: border-box; /* 1 */
	color: inherit; /* 2 */
	display: table; /* 1 */
	max-width: 100%; /* 1 */
	padding: 0; /* 3 */
	white-space: normal; /* 1 */
}

/**
 * Remove the default vertical scrollbar in IE.
 */

textarea {
	overflow: auto;
}

/**
 * 1. Add the correct box sizing in IE 10-.
 * 2. Remove the padding in IE 10-.
 */

[type="checkbox"],
[type="radio"] {
	box-sizing: border-box; /* 1 */
	padding: 0; /* 2 */
}

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */

[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
	height: auto;
}

/**
 * Correct the odd appearance of search inputs in Chrome and Safari.
 */

[type="search"] {
	-webkit-appearance: textfield;
}

/**
 * Remove the inner padding and cancel buttons in Chrome on OS X and
 * Safari on OS X.
 */

[type="search"]::-webkit-search-cancel-button,
[type="search"]::-webkit-search-decoration {
	-webkit-appearance: none;
}


// Mixins
// ----------------------
//
// MIXINS
//
// ----------------------
// ----------------------
// Media Queries
// Use predefined breakpoints defined in $wire-breakpoints or use custom value
// mq(phone)
// mq(phone, landscape)
// mq(820px)
// mq(768px, 1024px, landscape)
// ----------------------
@mixin mq($min, $max: false, $orientation: false) {
  @if map-has-key($wire-breakpoints, $min) {
    @if not $orientation {
      @media #{map-get($wire-breakpoints, $min)} {
        @content;
      }
    } @else {
      @if map-has-key($wire-breakpoints, $min) {
        @media #{map-get($wire-breakpoints, $min)} and (orientation : $orientation) {
          @content;
        }
      }
    }
  } @else {
    @if not $max {
      @media (max-width: #{$min}) {
        @content;
      }
    } @else {
      @if not $orientation {
        @media (min-width: #{$min}) and (max-width: #{$max}) {
          @content;
        }
      } @else {
        @media (min-width: #{$min}) and (max-width: #{$max}) and (orientation: #{$orientation}) {
          @content;
        }
      }
    }
  }
}

// ----------------------
// FontFace
// fontface(name, filename, weight, style, stretch)
// ----------------------
@function font-url($path) {
  @return url('fonts/' + $path);
}

@mixin font-face($font-family, $font-filename, $font-weight : normal, $font-style :normal, $font-stretch : normal) {
  @font-face {
      font-family: '#{$font-family}';
      src: font-url('#{$font-filename}.eot');
      src: font-url('#{$font-filename}.eot?#iefix') format('embedded-opentype'),
      font-url('#{$font-filename}.woff') format('woff'),
      font-url('#{$font-filename}.ttf') format('truetype'),
      font-url('#{$font-filename}.svg##{$font-family}') format('svg');
      font-weight: $font-weight;
      font-style: $font-style;
      font-stretch: $font-stretch;
  }
}


// Helpers
// ----------------------
//
// HELPERS
//
// ----------------------
// ----------------------
// REM Calculation
// rem(value, size)
// Size attribute is optional
// ----------------------
@function rem($value)  {
  $value: ($value / 10) * 1rem;
  @if ($value == 0rem) { $value: 0; } // Turn 0rem into 0
  @return $value;
}

// ----------------------
// EMs Calculation
// em(value, size)
// Size attribute is optional
// ----------------------
@function em($value, $context: $wire-font-size-base) {
  @return #{$value / $context}em;
}

// ----------------------
// Clearfix
// ----------------------
@mixin clearfix() {
  &:after,
  &:before{
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

@if $wire-markup == true{
  .#{$wire-namespace}clearfix {
    @include clearfix();
  }
}

// ----------------------
// Text Align
// ----------------------
$align-positions: left, center, right;
@each $align-position in $align-positions{
  @if $wire-markup == true {
    .#{$wire-namespace}align-#{$align-position} {
      text-align: $align-position;
    }
  }
}

// ----------------------
// Hidden
// ----------------------
%hidden {
  display: none !important;
  visibility: hidden;
}

@if $wire-markup == true{
  .hidden {
    @extend %hidden;
  }
}

// ----------------------
// Invisible
// ----------------------
%invisible {
  visibility : hidden;
}

@if $wire-markup == true{
  .invisible {
    @extend %invisible;
  }
}

// ----------------------
// Show Elements on Device
// ----------------------
@each $breakpoint, $value in $wire-breakpoints {
  @include mq($breakpoint) {
    @if $wire-markup == true {
      .#{$wire-namespace}visible-#{$breakpoint} {
        display: block !important;
      }
    }
  }
}

// ----------------------
// Hide Elements on Device
// ----------------------
@each $breakpoint, $value in $wire-breakpoints {
  @include mq($breakpoint) {
    @if $wire-markup == true {
      .#{$wire-namespace}hidden-#{$breakpoint} {
        display: none !important;
      }
    }
  }
}


// Global
// ----------------------
//
// Base
//
// ----------------------
html {
	box-sizing: border-box;
	font-size: 62.5%;
	height: 100%;
}

body {
	font-size: rem(16);
	height: 100%;
	line-height: $wire-line-height-base;
}

*,
*:before,
*:after {
	box-sizing: inherit;
}



// Components
// ----------------------
//
// BUTTONS
//
// ----------------------

// ----------------------
// Button
// ----------------------
%button {
	background-color: $wire-button-bg;
	border: 0;
	border-radius: $wire-border-radius;
	color: $wire-button-color;
	display: inline-block;
	line-height: inherit;
	padding: em(7, 10) em(14, 10);
	text-align: center;
	transition: background-color .2s ease-out;
	vertical-align: bottom;
	&:hover {
		background-color: darken($wire-button-bg, 15%);
		color: #ffffff;
	}
	&.small {
		font-size: rem(12);
	}
	&.large {
		font-size: rem(18);
	}
	&.x-large {
		font-size: rem(24);
	}
	&.alt {
		background-color: $wire-button-alt-bg;
		color: $wire-button-alt-color;
		&:hover {
			background-color: darken($wire-button-alt-bg, 15%);
		}
	}
}

@if $wire-markup == true {
	.#{$wire-namespace}button,
	.#{$wire-namespace}btn,
	input[type="submit"],
	input[type="button"] {
		@extend %button;
	}
	input[type="submit"][disabled],
	input[type="button"][disabled],
	.#{$wire-namespace}button[disabled],
	.#{$wire-namespace}btn[disabled],
	.#{$wire-namespace}button.disabled,
	.#{$wire-namespace}btn.disabled {
		background-color: lighten($wire-button-alt-bg, 5.5%);
		color: lighten($wire-button-alt-color, 5.5%);
		cursor: not-allowed;
		&:hover {
			background-color: lighten($wire-button-alt-bg, 5.5%);
			color: lighten($wire-button-alt-color, 5.5%);
		}
	}
}

// ----------------------
//
// Grid
//
// Content:
// - Core definition
// - Direction
// - Wrap
// - Align
// - column Align
// ----------------------

@mixin container() {
  height: 100%;
  width: 100%;
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after{
    clear: both;
  }
}

@if $wire-markup == true {
  .#{$wire-namespace}container {
    @include container();
  }
}

[class*="col-"] {
  box-sizing: border-box;
  width: 100%;
}


// $Grid
// Core Grid
@mixin grid() {
  display: flex;
  flex-wrap: wrap;
  width: 100%;
}

@if $wire-markup == true {
  .#{$wire-namespace}grid,
  [data-grid] {
    @include grid();
  }
}

// $Direction
// Row
@mixin grid-row() {
  flex-direction: row;
}

@if $wire-markup == true {
  [data-grid~="row"],
  .#{$wire-namespace}grid--row {
    @include grid-row();
  }
}

@mixin grid-row-reverse() {
  flex-direction: row-reverse;
}

@if $wire-markup == true {
  [data-grid~="row-reverse"],
  .#{$wire-namespace}grid--row-reverse {
    @include grid-row-reverse();
  }
}

@mixin grid-column() {
  flex-direction: column;
}

@if $wire-markup == true {
  [data-grid~="column"],
  .#{$wire-namespace}grid--column {
    @include grid-column();
  }
}

@mixin grid-column-reverse() {
  flex-direction: column-reverse;
}

@if $wire-markup == true {
  [data-grid~="column-reverse"],
  .#{$wire-namespace}grid--column-reverse {
    @include grid-column-reverse();
  }
}

// $Wrap
// Wrap
@mixin grid-wrap() {
  flex-wrap: wrap;
}

@if $wire-markup == true {
  [data-grid~="wrap"],
  .#{$wire-namespace}grid--wrap {
    @include grid-wrap();
  }
}

// Wrap Reverse
@mixin grid-wrap-reverse() {
  flex-wrap: wrap-reverse;
}

@if $wire-markup == true {
  [data-grid~="wrap-reverse"],
  .#{$wire-namespace}grid--wrap-reverse {
    @include grid-wrap-reverse();
  }
}

// Nowrap
@mixin grid-nowrap() {
  flex-wrap: nowrap;
}

@if $wire-markup == true {
  [data-grid~="nowrap"],
  .#{$wire-namespace}grid--nowrap {
    @include grid-nowrap();
  }
}

// $Align
// Left
@mixin grid-left() {
  justify-content: flex-start;
}

@if $wire-markup == true {
  [data-grid~="left"],
  .#{$wire-namespace}grid--left {
    @include grid-left();
  }
}

// Right
@mixin grid-right() {
  justify-content: flex-end;
}

@if $wire-markup == true {
  [data-grid~="right"],
  .#{$wire-namespace}grid--right {
    @include grid-right();
  }
}

// Center
@mixin grid-center() {
  justify-content: center;
}

@if $wire-markup == true {
  [data-grid~="center"],
  .#{$wire-namespace}grid--center {
    @include grid-center();
  }
}

// Space Between
@mixin grid-between() {
  justify-content: space-between;
}

@if $wire-markup == true {
  [data-grid~="space-between"],
  .#{$wire-namespace}grid--between {
    @include grid-between();
  }
}

// Space Around
@mixin grid-around() {
  justify-content: space-around;
}

@if $wire-markup == true {
  [data-grid~="space-around"],
  .#{$wire-namespace}grid--around {
    @include grid-around();
  }
}

// $column Align
// Top
@mixin grid-va-top() {
  align-items: flex-start;
}

@if $wire-markup == true {
  [data-grid~="va-top"],
  .#{$wire-namespace}grid--va-top {
    @include grid-va-top();
  }
}

// Bottom
@mixin grid-va-bottom() {
  align-items: flex-end;
}

@if $wire-markup == true {
  [data-grid~="va-bottom"],
  .#{$wire-namespace}grid--va-bottom {
    @include grid-va-bottom();
  }
}

// Center
@mixin grid-va-center() {
  align-items: center;
}

@if $wire-markup == true {
  [data-grid~="va-center"],
  .#{$wire-namespace}grid--va-center {
    @include grid-va-center();
  }
}

// Baseline
@mixin grid-va-baseline() {
  align-content: baseline;
}

@if $wire-markup == true {
  [data-grid~="va-baseline"],
  .#{$wire-namespace}grid--va-baseline {
    @include grid-va-baseline();
  }
}

// Stretch
@mixin grid-va-stretch() {
  align-content: stretch;
}

@if $wire-markup == true {
  [data-grid~="va-stretch"],
  .#{$wire-namespace}grid--va-stretch {
    @include grid-va-stretch();
  }
}

// $Content Align
// Stretch
@mixin grid-ca-stretch() {
  align-content: stretch;
}

@if $wire-markup == true {
  [data-grid~="ca-stretch"],
  .#{$wire-namespace}grid--ca-stretch {
    @include grid-ca-stretch();
  }
}

// Top
@mixin grid-ca-top() {
  align-content: flex-start;
}

@if $wire-markup == true {
  [data-grid~="ca-top"],
  .#{$wire-namespace}grid--ca-top {
    @include grid-ca-top();
  }
}

// Bottom
@mixin grid-ca-bottom() {
  align-content: flex-end;
}

@if $wire-markup == true {
  [data-grid~="ca-bottom"],
  .#{$wire-namespace}grid--ca-bottom {
    @include grid-ca-bottom();
  }
}

// Center
@mixin grid-ca-center() {
  align-content: center;
}

@if $wire-markup == true {
  [data-grid~="ca-center"],
  .#{$wire-namespace}grid--ca-center {
    @include grid-ca-center();
  }
}

// Space Around
@mixin grid-ca-space-around() {
  align-content: space-around;
}

@if $wire-markup == true {
  [data-grid~="ca-space-around"],
  .#{$wire-namespace}grid--ca-space-around {
    @include grid-ca-space-around();
  }
}

// Space Between
@mixin grid-ca-space-between() {
  align-content: space-between;
}

@if $wire-markup == true {
  [data-grid~="ca-space-between"],
  .#{$wire-namespace}grid--ca-space-between {
    @include grid-ca-space-between();
  }
}


// Grid Helpers
// Center - Center
// Center vertical and horizontal
@mixin grid-center-center() {
  justify-content: center;
  align-content: center;
  align-items: center;
  min-height: 100%;
  > * {
    display: flex;
    flex-direction: column;
    justify-content: center;
  }
}

@if $wire-markup == true {
  [data-grid~="center-center"],
  .#{$wire-namespace}grid--center-center {
    @include grid-center-center();
  }
}

// Order
@mixin order($position, $force: false) {
  @if $force == true {
      order: $position !important;
  } @else {
      order: $position;
  }
}

// Push Left
@mixin push-left() {
  @include order(-100, true);
}

%push-left {
  @include push-left;
}
@if $wire-markup == true {
  .push-left {
      @extend %push-left;
  }
}

// Push Right
@mixin push-right() {
  @include order(100, true);
}

%push-right {
  @include push-right;
}
@if $wire-markup == true {
  .push-right {
      @extend %push-right;
  }
}

// $Core Width
@mixin columns($col) {
  width: $col * 100% / $wire-max-columns;
}
@for $col from 1 through ($wire-max-columns) {
  %col-#{$col} {
    @include columns($col);
  }
  @if $wire-markup == true {
    .#{$wire-namespace}col-#{$col},
    [data-col~="#{$col}"] {
      @include columns($col);
      @include mq(small) {
        width: 100%;
      }
    }
  }
}

@for $col from 1 through ($wire-max-columns) {
  @each $breakpoint, $value in $wire-breakpoints {
    @include mq($breakpoint) {
      @if $wire-markup == true {
        .#{$wire-namespace}col-#{$breakpoint}-#{$col},
        [data-col-#{$breakpoint}~="#{$col}"] {
          @include columns($col);
        }
      }
    }
  }
}

@for $col from 1 through ($wire-max-columns) {
  %col-offset-#{$col} {
    margin-left: $col * 100% / $wire-max-columns;
  }

  @if $wire-markup == true {
    .#{$wire-namespace}col-offset-#{$col} {
      @extend %col-offset-#{$col};
    }
  }
}

@for $col from 1 through ($wire-max-columns) {
  @each $breakpoint, $value in $wire-breakpoints {
    @include mq($breakpoint) {
      @if $wire-markup == true {
        .#{$wire-namespace}col-#{$breakpoint}-offset-#{$col} {
          margin-left: $col * 100% / $wire-max-columns;
        }
      }
    }
  }
}

// $Grid Row
@mixin row() {
  @include grid;
}

@if $wire-markup == true {
  .#{$wire-namespace}row {
    @include row();
  }
}

// ----------------------
//
// Typography
//
// ----------------------
// ----------------------
// Headings
// ----------------------
.h1,
.h2,
.h3,
.h4,
.h5,
.h6,
h1,
h2,
h3,
h4,
h5,
h6 {
	font-weight: 600;
	margin-bottom: 1rem;
	margin-top: 0;
}

h1,
.h1 {
	font-size: rem(36);
	line-height: 1.3;
}

h2,
.h2 {
	font-size: rem(30);
	line-height: 1.35;
}

h3,
.h3 {
	font-size: rem(24);
	line-height: 1.45;
}

h4,
.h4 {
	font-size: rem(18);
	line-height: 1.6;
}

h5,
.h5 {
	font-size: rem(14);
	line-height: 1.75;
}

h6,
.h6 {
	font-size: rem(12);
	line-height: 1.9;
}

// ----------------------
// Mark
// ----------------------
mark {
	background: rgba($wire-color-primary, .16);
	padding: .2em;
}

// ----------------------
// Links
// ----------------------
a {
	color: $wire-link-color;
	text-decoration: none;
	&:hover,
	&:active {
		color: $wire-link-color-hover;
	}
}

// ----------------------
//
// Forms
//
// ----------------------

@if $wire-markup == true {
	.#{$wire-namespace}form {
		&[data-form~="horizontal"] {
			@include grid-va-bottom();
			@include grid();
			.field {
				padding-right: $wire-base-gutter;
				&:last-child {
					padding-right: 0;
				}
			}
		}
		ul {
			@extend %list-unstyled;
		}
		.row {
			@include grid();
			.field {
				@include mq(small) {
					padding-left: 0;
					padding-right: 0;
				}

				padding-left: $wire-base-gutter;
				padding-right: $wire-base-gutter;
				&:first-child {
					padding-left: 0;
				}
				&:last-child {
					padding-right: 0;
				}
			}
		}
		.field {
			margin-bottom: 1em;
			label {
				display: inline-block;
				margin-bottom: .3rem;
			}
			input[type="email"],
			input[type="password"],
			input[type="search"],
			input[type="text"],
			input[type="tel"],
			input[type="url"],
			select {
				background: $wire-form-input-bg;
				border: 1px solid $wire-form-input-border;
				border-radius: 3px;
				height: rem(38);
				padding: .5em;
				transition: border-color .20s ease-in-out;
				width: 100%;
				&:focus {
					border-color: darken($wire-form-input-border, 25%);
					outline: none;
				}
			}
			textarea {
				@extend input[type="text"];

				height: auto;
			}
			input[type="checkbox"],
			input[type="radio"] {
				&:focus {
					border-color: darken($wire-form-input-border, 25%);
					outline: none;
				}
				+ label {
					margin-left: .25rem;
					max-width: 88%;
					vertical-align: top;
				}
			}
		}
	}
}

// ----------------------//// List//// ----------------------// ----------------------// Definition list// ----------------------dl {
	dt {
		font-weight: 700;
	}	dd {
		margin-left: 0;
	}	&.list--horizontal {
		@include grid();		dt {
			padding-right: 1em;
			text-align: left;
			width: 30%;
		}		dd {
			width: 70%;
		}
	}
}// ----------------------// List inline// ----------------------%list-inline {
	display: inline-block;
	padding: 0;	> li {
		display: inline-block;
		padding-left: 5px;
		padding-right: 5px;		&:first-child {
			padding-left: 0;
		}		&:last-child {
			padding-right: 0;
		}
	}
}@if $wire-markup == true {
	.list--inline {
		@extend %list-inline;
	}
}// ----------------------// List unstyled// ----------------------%list-unstyled {
	list-style: none;
	margin: 0;
	padding: 0;
	ul {
		padding: 0;
	}	li {
		list-style: none;
	}
}@if $wire-markup == true {
	.list--unstyled {
		@extend %list-unstyled;
	}
}

// ----------------------//// Tables//// ----------------------table {
	@include mq(small) {
		&[data-table~="responsive"] {
			thead,
			th {
				display: none;
			}			tbody {
				tr {
					border-bottom: 1px solid $wire-table-border-color;
					display: block;&:last-child {
						border-bottom: 0;
					}
				}				td {
					display: block;
					margin-left: 8em;					&::before {
						content: attr(data-th) ": ";
						display: inline-block;
						font-weight: 700;
						margin-left: -8em;
						min-width: 8em;
					}
				}
			}			tfoot {
				td {
					display: block;
				}
			}
		}
	}

	width: 100%;	th,
	td {
		padding: .5em;
	}	th {
		text-align: left;
	}	thead {
		th {
			border-bottom: 1px solid $wire-table-border-color;
		}
	}	tfoot {
		border-top: 1px solid $wire-table-border-color;
	}&[data-table~="striped"] {
		tr {
			&:nth-child(even) {
				background: $wire-table-tr-even-bg;
			}
		}
	}
}

// ----------------------//// Images//// ----------------------img {
	max-width: 100%;
	width: 100%;	&.fixed {
		width: auto;
	}	&.border {
		border: 1px solid $wire-color-alt;
		padding: .2em;
	}	&.round {
		border-radius: 100%;
	}
}


// Debug
@if $wire-debug == true {
	/* ----------------------
//
// DEBUG
// Enable this to visually detect incorrect markup.
//
// ---------------------- */
	// ----------------------
	// Empty Elements
	// ----------------------
	:empty {
		outline: 5px solid yellow;
	}


	// ----------------------
	// Images
	// ----------------------
	img {
		outline: 5px solid red;
		&[alt] {
			outline: none;
		}
		&[alt=""] {
			outline: 5px solid yellow;
		}
	}


	// ----------------------
	// Links
	// ----------------------
	a {
		outline: 5px solid yellow;
		&[title] {
			outline: none;
		}
		&[href="#"],
		&[href*="javascript"] {
			outline: 5px solid yellow;
		}
		&[target] {
			outline: 5px solid yellow;
		}
	}


	// ----------------------
	// Lists
	// ----------------------
	ul,
	ol {
		> *:not(li) {
			outline: 5px solid red;
		}
	}


	// ----------------------
	// Tables
	// ----------------------
	th {
		outline: 5px solid yellow;
	}
	th[scope] {
		outline: none;
	}

	// Tfoot in correct order
	tbody + tfoot {
		outline: 5px solid yellow;
	}

	// Put tbody or thead
	table > tr {
		outline: 5px solid yellow;
	}


	// ----------------------
	// Forms
	// ----------------------
	form {
		outline: 5px solid red;
		&[action] {
			outline: none;
		}
	}


	// ----------------------
	// Form Fields
	// ----------------------
	textarea,
	input {
		outline: 5px solid red;
	}
	input[type] {
		outline: none;
	}
	textarea[rows][cols] {
		outline: none;
	}
	input[type=submit] {
		outline: 5px solid red;
	}
	input[type=submit][value] {
		outline: none;
	}


	// ----------------------
	// Remove inline styles if posible.
	// ----------------------
	[style] {
		outline: 5px solid yellow;
	}


	// ----------------------
	// No ID's for CSS
	// ----------------------
	[id] {
		outline: 5px solid yellow;
	}
}

